//// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
//// Changes may cause incorrect behavior and will be lost if the code is
//// regenerated.

//using System.Threading;
//using System.Threading.Tasks;

//namespace BingLibrary.BingSdkFromSwaggerClient
//{
//    /// <summary>
//    /// Extension methods for BingSdkFromSwaggerClient.
//    /// </summary>
//    public static partial class BingSdkFromSwaggerClientExtensions
//    {
//            /// <summary>
//            /// Get relevant images for a given query.
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='count'>
//            /// The number of image results to return in the response. The actual number
//            /// delivered may be less than requested.
//            /// </param>
//            /// <param name='offset'>
//            /// The zero-based offset that indicates the number of image results to skip
//            /// before returning results.
//            /// </param>
//            /// <param name='mkt'>
//            /// The market where the results come from. Typically, this is the country
//            /// where the user is making the request from; however, it could be a
//            /// different country if the user is not located in a country where Bing
//            /// delivers results. The market must be in the form {language code}-{country
//            /// code}. For example, en-US.
//            /// 
//            /// &lt;br&gt;
//            /// &lt;br&gt;
//            /// Full list of supported markets:
//            /// &lt;br&gt;
//            /// es-AR,en-AU,de-AT,nl-BE,fr-BE,pt-BR,en-CA,fr-CA,es-CL,da-DK,fi-FI,fr-FR,de-DE,zh-HK,en-IN,en-ID,en-IE,it-IT,ja-JP,ko-KR,en-MY,es-MX,nl-NL,en-NZ,no-NO,zh-CN,pl-PL,pt-PT,en-PH,ru-RU,ar-SA,en-ZA,es-ES,sv-SE,fr-CH,de-CH,zh-TW,tr-TR,en-GB,en-US,es-US.
//            /// Possible values include: 'en-us'
//            /// </param>
//            /// <param name='safeSearch'>
//            /// A filter used to filter results for adult content. Possible values
//            /// include: 'Off', 'Moderate', 'Strict'
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            public static void Search(this IBingSdkFromSwaggerClient operations, double? count = 10, double? offset = 0, string mkt = "en-us", string safeSearch = "Moderate", string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
//            {
//                Task.Factory.StartNew(s => ((IBingSdkFromSwaggerClient)s).SearchAsync(count, offset, mkt, safeSearch, subscriptionKey, ocpApimSubscriptionKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Get relevant images for a given query.
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='count'>
//            /// The number of image results to return in the response. The actual number
//            /// delivered may be less than requested.
//            /// </param>
//            /// <param name='offset'>
//            /// The zero-based offset that indicates the number of image results to skip
//            /// before returning results.
//            /// </param>
//            /// <param name='mkt'>
//            /// The market where the results come from. Typically, this is the country
//            /// where the user is making the request from; however, it could be a
//            /// different country if the user is not located in a country where Bing
//            /// delivers results. The market must be in the form {language code}-{country
//            /// code}. For example, en-US.
//            /// 
//            /// &lt;br&gt;
//            /// &lt;br&gt;
//            /// Full list of supported markets:
//            /// &lt;br&gt;
//            /// es-AR,en-AU,de-AT,nl-BE,fr-BE,pt-BR,en-CA,fr-CA,es-CL,da-DK,fi-FI,fr-FR,de-DE,zh-HK,en-IN,en-ID,en-IE,it-IT,ja-JP,ko-KR,en-MY,es-MX,nl-NL,en-NZ,no-NO,zh-CN,pl-PL,pt-PT,en-PH,ru-RU,ar-SA,en-ZA,es-ES,sv-SE,fr-CH,de-CH,zh-TW,tr-TR,en-GB,en-US,es-US.
//            /// Possible values include: 'en-us'
//            /// </param>
//            /// <param name='safeSearch'>
//            /// A filter used to filter results for adult content. Possible values
//            /// include: 'Off', 'Moderate', 'Strict'
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task SearchAsync(this IBingSdkFromSwaggerClient operations, double? count = 10, double? offset = 0, string mkt = "en-us", string safeSearch = "Moderate", string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
//            {
//                await operations.SearchWithHttpMessagesAsync(count, offset, mkt, safeSearch, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
//            }

//            /// <summary>
//            /// Get insights for an image sent in the POST body.
//            /// &lt;br/&gt;
//            /// &lt;br/&gt;
//            /// See full documentation for this API &lt;a target="_blank"
//            /// href="https://msdn.microsoft.com/en-us/library/dn760791.aspx"&gt;here&lt;a&gt;
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            public static void ImageInsights(this IBingSdkFromSwaggerClient operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
//            {
//                Task.Factory.StartNew(s => ((IBingSdkFromSwaggerClient)s).ImageInsightsAsync(subscriptionKey, ocpApimSubscriptionKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Get insights for an image sent in the POST body.
//            /// &lt;br/&gt;
//            /// &lt;br/&gt;
//            /// See full documentation for this API &lt;a target="_blank"
//            /// href="https://msdn.microsoft.com/en-us/library/dn760791.aspx"&gt;here&lt;a&gt;
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task ImageInsightsAsync(this IBingSdkFromSwaggerClient operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
//            {
//                await operations.ImageInsightsWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
//            }

//            /// <summary>
//            /// Get currently trending images.
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            public static void Trending(this IBingSdkFromSwaggerClient operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
//            {
//                Task.Factory.StartNew(s => ((IBingSdkFromSwaggerClient)s).TrendingAsync(subscriptionKey, ocpApimSubscriptionKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Get currently trending images.
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='subscriptionKey'>
//            /// subscription key in url
//            /// </param>
//            /// <param name='ocpApimSubscriptionKey'>
//            /// subscription key in header
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task TrendingAsync(this IBingSdkFromSwaggerClient operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
//            {
//                await operations.TrendingWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
//            }

//    }
//}
